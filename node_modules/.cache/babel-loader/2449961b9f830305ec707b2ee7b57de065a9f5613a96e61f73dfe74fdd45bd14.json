{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2000a\\\\Documents\\\\Internship\\\\quiz-platform\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Question from \"./Question\";\nimport Timer from \"./Timer\";\nimport Scoreboard from \"./Scoreboard\";\nimport quizData from \"../data/quizData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const [currentTypeIndex, setCurrentTypeIndex] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [resetTrigger, setResetTrigger] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected option\n\n  const currentType = quizData[currentTypeIndex];\n  const currentQuestion = currentType.questions[currentQuestionIndex];\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < currentType.questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    } else if (currentTypeIndex < quizData.length - 1) {\n      setCurrentTypeIndex(prevIndex => prevIndex + 1);\n      setCurrentQuestionIndex(0);\n    } else {\n      setShowScore(true);\n    }\n    setSelectedAnswer(null); // Reset the selected answer for the next question\n    setResetTrigger(prev => prev + 1); // Reset timer\n  };\n  const handleAnswer = selectedAnswer => {\n    setSelectedAnswer(selectedAnswer); // Store selected answer in state\n\n    if (selectedAnswer === currentQuestion.correctAnswer) {\n      setScore(prevScore => prevScore + 1);\n    }\n    setTimeout(() => {\n      handleNextQuestion();\n    }, 300); // Small delay for UI smoothness\n  };\n  const handleFinishQuiz = () => {\n    if (window.confirm(\"Do you want to finish your quiz?\")) {\n      setShowScore(true);\n    }\n  };\n  const handleRetry = () => {\n    setCurrentTypeIndex(0);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setShowScore(false);\n    setResetTrigger(0);\n    setSelectedAnswer(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(Scoreboard, {\n      score: score,\n      totalQuestions: quizData.flatMap(type => type.questions).length,\n      onRetry: handleRetry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-2xl bg-white shadow-lg rounded-lg p-6 relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinishQuiz,\n        className: \"absolute top-4 right-4  px-4 py-2 bg-red-500 text-white font-semibold rounded-lg shadow-md hover:bg-red-600 transition\",\n        children: \"Finish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-center text-gray-800 mb-4\",\n        children: currentType.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        timeLimit: 30,\n        onTimeUp: handleNextQuestion,\n        resetTrigger: resetTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        question: currentQuestion,\n        onAnswer: handleAnswer,\n        selectedAnswer: selectedAnswer // Pass selected answer state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"jX6QCEiSqxHU3y83FyVTOOOPY6U=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","Question","Timer","Scoreboard","quizData","jsxDEV","_jsxDEV","Quiz","_s","currentTypeIndex","setCurrentTypeIndex","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","showScore","setShowScore","resetTrigger","setResetTrigger","selectedAnswer","setSelectedAnswer","currentType","currentQuestion","questions","handleNextQuestion","length","prevIndex","prev","handleAnswer","correctAnswer","prevScore","setTimeout","handleFinishQuiz","window","confirm","handleRetry","className","children","totalQuestions","flatMap","type","onRetry","fileName","_jsxFileName","lineNumber","columnNumber","onClick","timeLimit","onTimeUp","question","onAnswer","_c","$RefreshReg$"],"sources":["C:/Users/2000a/Documents/Internship/quiz-platform/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Timer from \"./Timer\";\r\nimport Scoreboard from \"./Scoreboard\";\r\nimport quizData from \"../data/quizData\";\r\n\r\nconst Quiz = () => {\r\n  const [currentTypeIndex, setCurrentTypeIndex] = useState(0);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [resetTrigger, setResetTrigger] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected option\r\n\r\n  const currentType = quizData[currentTypeIndex];\r\n  const currentQuestion = currentType.questions[currentQuestionIndex];\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < currentType.questions.length - 1) {\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n    } else if (currentTypeIndex < quizData.length - 1) {\r\n      setCurrentTypeIndex((prevIndex) => prevIndex + 1);\r\n      setCurrentQuestionIndex(0);\r\n    } else {\r\n      setShowScore(true);\r\n    }\r\n    setSelectedAnswer(null); // Reset the selected answer for the next question\r\n    setResetTrigger((prev) => prev + 1); // Reset timer\r\n  };\r\n\r\n  const handleAnswer = (selectedAnswer) => {\r\n    setSelectedAnswer(selectedAnswer); // Store selected answer in state\r\n\r\n    if (selectedAnswer === currentQuestion.correctAnswer) {\r\n      setScore((prevScore) => prevScore + 1);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      handleNextQuestion();\r\n    }, 300); // Small delay for UI smoothness\r\n  };\r\n\r\n  const handleFinishQuiz = () => {\r\n    if (window.confirm(\"Do you want to finish your quiz?\")) {\r\n      setShowScore(true);\r\n    }\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    setCurrentTypeIndex(0);\r\n    setCurrentQuestionIndex(0);\r\n    setScore(0);\r\n    setShowScore(false);\r\n    setResetTrigger(0);\r\n    setSelectedAnswer(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\r\n      {showScore ? (\r\n        <Scoreboard\r\n          score={score}\r\n          totalQuestions={quizData.flatMap((type) => type.questions).length}\r\n          onRetry={handleRetry}\r\n        />\r\n      ) : (\r\n        <div className=\"w-full max-w-2xl bg-white shadow-lg rounded-lg p-6 relative\">\r\n          <button\r\n    onClick={handleFinishQuiz}\r\n    className=\"absolute top-4 right-4  px-4 py-2 bg-red-500 text-white font-semibold rounded-lg shadow-md hover:bg-red-600 transition\"\r\n  >\r\n    Finish\r\n  </button>\r\n          <h2 className=\"text-2xl font-bold text-center text-gray-800 mb-4\">{currentType.type}</h2>\r\n          <Timer timeLimit={30} onTimeUp={handleNextQuestion} resetTrigger={resetTrigger} />\r\n          <Question\r\n            question={currentQuestion}\r\n            onAnswer={handleAnswer}\r\n            selectedAnswer={selectedAnswer} // Pass selected answer state\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}